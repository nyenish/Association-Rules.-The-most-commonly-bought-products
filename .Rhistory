install.packages("jpeg")
install.packages("factoextra")
install.packages("gridExtra")
install.packages("ggplot2")
install.packages("rgdal")
library(jpeg)
library(ggplot2)
library(cluster)
library(dplyr)
library(raster)
library(rgdal)
setwd("D:\\R and R Studio\\Clustering.project\\image")
if(!"raster" %in% rownames(installed.packages())){install.packages("raster")}
photo <- system.file('fire.jpg',package='imager')
image <- stack("fire.jpg")
plot(image)
r = raster("fire.jpg", band = 3)
g = raster("fire.jpg", band = 2)
b = raster("fire.jpg", band = 1)
rgb = brick()
plot(g)
#just experement of the segmantion
rgb = brick(b,g,r)
plot(rgb)
plotRGB(rgb, r = 3, g = 2, b = 1, stretch = "lin")
ndvi = (mbr$fire.1 - mbr$fire.2)/(mbr$fire.1 - mbr$fire.2)
plot(ndvi)
kMeansResult <- kmeans(image[], centers=2)
result <- raster(image[[1]])
result <- setValues(result, kMeansResult$cluster)
plot(result)
kMeansResult <- kmeans(image[], centers=2)
result <- raster(image[[1]])
result <- setValues(result, kMeansResult$cluster)
plot(result)
kMeansResult <- kmeans(image[], centers=3)
result <- raster(image[[1]])
result <- setValues(result, kMeansResult$cluster)
plot(result)
plot(result, col=c("black", "orange","red"))
length(kMeansResult$cluster[kMeansResult$cluster==3])/length(kMeansResult$cluster)*100
install.packages("jpeg")
install.packages("factoextra")
install.packages("jpeg")
library(ggplot2)
library(readr)
library(arules)
library(arulesViz)
setwd("D:\\R and R Studio\\Association Rules")
getwd()
data1<-read.csv("dataset.csv")
names(data)
data<-read.csv("dataset.csv", header=TRUE, sep=";")
names(data)
library(ggplot2)
library(readr)
library(arules)
library(arulesViz)
setwd("D:\\R and R Studio\\Association Rules")
getwd()
data<-read.csv("dataset.csv", header=TRUE, sep=";")
names(data)
head(data1)
system("ls ../input")
al<- read.csv('dataset.csv', header=F)
str(al)
al1<-al[,1:6]
alnan<-as(al1, "transactions")
yontem<-apriori(alnan, parameter = list(minlen=2, maxlen=4, supp=0.001, conf=0.001))
inspect(alnan[1:3])
inspect(yontem[1:5])
rule<-sort(yontem, by="support", decreasing = T)
inspect(rule[1:5])
plot(yontem, measure=c("confidence", "lift"), shading="support")
plot(yontem[1:5], method="matrix", measure="lift")
plot(yontem[1:5], method="matrix3D", measure="lift")
satylan <- head(sort(yontem, by="lift"), 5)
plot(satylan, method="graph")
plot(satylan, method="paracoord")
library(ggplot2)
library(readr)
library(arules)
library(arulesViz)
setwd("D:\\R and R Studio\\Association Rules")
getwd()
data<-read.csv("dataset.csv", header=TRUE, sep=";")
names(data)
head(data1)
head(data1)
head(data)
system("ls ../input")
al<- read.csv('dataset.csv', header=F)
str(al)
system("ls ../input")
al<- read.csv('dataset.csv', header=F)
str(al)
alnan<-as(al1, "transactions")
yontem<-apriori(alnan, parameter = list(minlen=2, maxlen=4, supp=0.001, conf=0.001))
al1<-al[,1:6]
alnan<-as(al1, "transactions")
yontem<-apriori(alnan, parameter = list(minlen=2, maxlen=4, supp=0.001, conf=0.001))
inspect(alnan[1:3])
inspect(yontem[1:5])
inspect(alnan[1:5])
inspect(yontem[1:5])
inspect(yontem[1:5])
rule<-sort(yontem, by="support", decreasing = T)
inspect(rule[1:5])
plot(yontem, measure=c("confidence", "lift"), shading="support")
plot(yontem[1:5], method="matrix", measure="lift")
plot(yontem[1:5], method="matrix3D", measure="lift")
plot(yontem[1:5], method="matrix3D", measure="lift")
satylan <- head(sort(yontem, by="lift"), 5)
plot(satylan, method="graph")
plot(satylan, method="paracoord")
